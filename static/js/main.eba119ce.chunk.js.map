{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","addTask","e","a","async","preventDefault","setState","todos","state","id","length","task","newTask","done","taskInput","current","value","saveTodos","JSON","parse","localStorage","getItem","React","createRef","todo","this","setItem","stringify","onSubmit","type","ref","onChange","target","pending","map","key","onClick","finish","completed","unfinish","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAgGeA,EA9Ff,YACE,aAAe,IAAD,8BACZ,+CAkBFC,QAAU,SAAMC,GAAN,SAAAC,EAAAC,OAAA,uDACRF,EAAEG,iBADM,WAAAF,EAAA,MAGF,EAAKG,SAAS,CAClBC,MAAM,GAAD,mBACA,EAAKC,MAAMD,OADX,CAEH,CACEE,GAAI,EAAKD,MAAMD,MAAMG,OAAS,EAC9BC,KAAM,EAAKH,MAAMI,QACjBC,MAAM,QATJ,OAcR,EAAKC,UAAUC,QAAQC,MAAQ,GAC/B,EAAKC,YAfG,sCAhBR,EAAKT,MAAQ,CACXI,QAAS,GACTL,MAAOW,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAGtD,EAAKP,UAAYQ,IAAMC,YARX,EADhB,oEAsCSC,GACLA,EAAKX,MAAO,EAEZY,KAAKnB,SAAS,CAAEC,MAAOkB,KAAKjB,MAAMD,QAClCkB,KAAKR,cA1CT,+BA6CWO,GACPA,EAAKX,MAAO,EAEZY,KAAKnB,SAAS,CAAEC,MAAOkB,KAAKjB,MAAMD,QAClCkB,KAAKR,cAjDT,kCAqDIG,aAAaM,QAAQ,QAASR,KAAKS,UAAUF,KAAKjB,MAAMD,UArD5D,+BAwDY,IAAD,OACP,OACE,yBAAKE,GAAG,OACN,0BAAMmB,SAAUH,KAAKxB,SACnB,2BACE4B,KAAK,OACLC,IAAKL,KAAKX,UACViB,SAAU,SAAA7B,GAAC,OAAI,EAAKI,SAAS,CAAEM,QAASV,EAAE8B,OAAOhB,WAEnD,4BAAQa,KAAK,UAAb,QAEF,4BACGJ,KAAKQ,QAAQC,KAAI,SAAAV,GAChB,OACE,wBAAIW,IAAKX,EAAKf,IACZ,8BAAOe,EAAKb,MACZ,4BAAQyB,QAAS,kBAAM,EAAKC,OAAOb,KAAnC,aAMR,yCACA,4BACGC,KAAKa,UAAUJ,KAAI,SAAAV,GAClB,OACE,wBAAIW,IAAKX,EAAKf,IACZ,8BAAOe,EAAKb,MACZ,4BAAQyB,QAAS,kBAAM,EAAKG,SAASf,KAArC,gBApFhB,8BAaI,OAAOC,KAAKjB,MAAMD,MAAMiC,QAAO,SAAAhB,GAAI,OAAKA,EAAKX,UAbjD,gCAiBI,OAAOY,KAAKjB,MAAMD,MAAMiC,QAAO,SAAAhB,GAAI,OAAIA,EAAKX,YAjBhD,GAAyBS,IAAMmB,WCUXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eba119ce.chunk.js","sourcesContent":["import React from 'react'\n\nexport class App extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      newTask: '',\n      todos: JSON.parse(localStorage.getItem('todos')) || []\n    }\n\n    this.taskInput = React.createRef()\n  }\n\n  get pending() {\n    return this.state.todos.filter(todo => !todo.done)\n  }\n\n  get completed() {\n    return this.state.todos.filter(todo => todo.done)\n  }\n\n  addTask = async e => {\n    e.preventDefault()\n\n    await this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          id: this.state.todos.length + 1,\n          task: this.state.newTask,\n          done: false\n        }\n      ]\n    })\n\n    this.taskInput.current.value = ''\n    this.saveTodos()\n  }\n\n  finish(todo) {\n    todo.done = true\n\n    this.setState({ todos: this.state.todos })\n    this.saveTodos()\n  }\n\n  unfinish(todo) {\n    todo.done = false\n\n    this.setState({ todos: this.state.todos })\n    this.saveTodos()\n  }\n\n  saveTodos() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos))\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <form onSubmit={this.addTask}>\n          <input\n            type=\"text\"\n            ref={this.taskInput}\n            onChange={e => this.setState({ newTask: e.target.value })}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ul>\n          {this.pending.map(todo => {\n            return (\n              <li key={todo.id}>\n                <span>{todo.task}</span>\n                <button onClick={() => this.finish(todo)}>Done</button>\n              </li>\n            )\n          })}\n        </ul>\n\n        <h4>Completed</h4>\n        <ul>\n          {this.completed.map(todo => {\n            return (\n              <li key={todo.id}>\n                <span>{todo.task}</span>\n                <button onClick={() => this.unfinish(todo)}>Done</button>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}